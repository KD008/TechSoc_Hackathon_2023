{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMvT/03lnoBUJ/ugAFTg+3Q"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"3011fa28b8784cd3b1c3892842f8a925":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_bb412c7d9daf45b3ab7d80e4ed92545f","IPY_MODEL_833b444bf0664f32809ca248eb779eb2","IPY_MODEL_b16443d1a60d4a6cb46fd103c69352d1"],"layout":"IPY_MODEL_3f5f9eeceb0848fbb8b5a136d7782eb2"}},"bb412c7d9daf45b3ab7d80e4ed92545f":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_4ca0bf0ffb43454dbcec5f94e7567417","placeholder":"​","style":"IPY_MODEL_17625d7d2f5447b389fca375e4b08fa9","value":"Downloading (…)lve/main/config.json: 100%"}},"833b444bf0664f32809ca248eb779eb2":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_e1cc009c4cd34365a30240f151d91461","max":483,"min":0,"orientation":"horizontal","style":"IPY_MODEL_863442480bef43af864a71f92c5f3a88","value":483}},"b16443d1a60d4a6cb46fd103c69352d1":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_38d1b787a57b4f849122f7526e48b0e8","placeholder":"​","style":"IPY_MODEL_0b5dedd4c8244c06857480f1f018666d","value":" 483/483 [00:00&lt;00:00, 14.7kB/s]"}},"3f5f9eeceb0848fbb8b5a136d7782eb2":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"4ca0bf0ffb43454dbcec5f94e7567417":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"17625d7d2f5447b389fca375e4b08fa9":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"e1cc009c4cd34365a30240f151d91461":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"863442480bef43af864a71f92c5f3a88":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"38d1b787a57b4f849122f7526e48b0e8":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"0b5dedd4c8244c06857480f1f018666d":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"126c6557c97c45a68535302e4c0367e8":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_afbd9f8843794eaf8fc6cbf201451275","IPY_MODEL_435134fe7e0c4ba090e09952409bc472","IPY_MODEL_7f4072f2ee0347bf9f1aca3e4587eee4"],"layout":"IPY_MODEL_a8fab88d57bc49378a366b1e4f3f29a8"}},"afbd9f8843794eaf8fc6cbf201451275":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_0ffaab042fb047c494610268f989c75f","placeholder":"​","style":"IPY_MODEL_8e5e36db2cd14ccc9182b004d74cfb69","value":"Downloading (…)&quot;pytorch_model.bin&quot;;: 100%"}},"435134fe7e0c4ba090e09952409bc472":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_880c41577587403484461214bd284923","max":267967963,"min":0,"orientation":"horizontal","style":"IPY_MODEL_96a3ce2df11f473197651cbe5537b659","value":267967963}},"7f4072f2ee0347bf9f1aca3e4587eee4":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_c0cc033804a944c58145f1386cca32cb","placeholder":"​","style":"IPY_MODEL_52dbd03613c444a0874103b9a02e3f1b","value":" 268M/268M [00:02&lt;00:00, 94.4MB/s]"}},"a8fab88d57bc49378a366b1e4f3f29a8":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"0ffaab042fb047c494610268f989c75f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8e5e36db2cd14ccc9182b004d74cfb69":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"880c41577587403484461214bd284923":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"96a3ce2df11f473197651cbe5537b659":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"c0cc033804a944c58145f1386cca32cb":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"52dbd03613c444a0874103b9a02e3f1b":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}},"accelerator":"GPU","gpuClass":"standard"},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"2KLCItAwivXe"},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import os"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/gdrive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uG8UskJ3i02T","executionInfo":{"status":"ok","timestamp":1677993843202,"user_tz":-330,"elapsed":22176,"user":{"displayName":"Gadekar Jaideep Bharat ch19b009","userId":"14109346550278320247"}},"outputId":"e67b7ce1-0691-4d08-915d-493dd1311e14"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/gdrive\n"]}]},{"cell_type":"code","source":["print(os.listdir('./gdrive/MyDrive/Techsoc Hackathon'))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"D0MJ-DA_i2g6","executionInfo":{"status":"ok","timestamp":1677953273356,"user_tz":-330,"elapsed":452,"user":{"displayName":"Gadekar Jaideep Bharat ch19b009","userId":"14109346550278320247"}},"outputId":"c1bcf913-2deb-4be6-c8db-9c55fdb0ea59"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['PS3_train.csv', 'Notebook1.pynb']\n"]}]},{"cell_type":"code","source":["data = pd.read_csv('./gdrive/MyDrive/Techsoc Hackathon/PS3_train.csv')\n","data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"dTYeARSTjjgE","executionInfo":{"status":"ok","timestamp":1677953275779,"user_tz":-330,"elapsed":1096,"user":{"displayName":"Gadekar Jaideep Bharat ch19b009","userId":"14109346550278320247"}},"outputId":"420c7fad-ce27-4591-92ab-8075f6cb2ab2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                             content  \\\n","0  Premium quality five pocket jean from Wrangler...   \n","1  If you're looking for a different kind of anim...   \n","2  First things first: Yes, Thinking XXX features...   \n","3  Feathertouch. 100% Polyester Machine Wash Warm...   \n","4  When you need outstanding fuel delivery, easy ...   \n","\n","                                               title         uid  target_ind  \n","0  Amazon.com: Wrangler Men's Rugged Wear Relaxed...  B0000CBALT         247  \n","1  Sakura Diaries - Complete Series Collector's E...  B00005QFDT         453  \n","2                 Thinking XXX (Extended Cut) (2006)  B000BNXD50         228  \n","3  Amazon.com: Petite Feathertouch Pull-On Pant: ...  B0002LK9V2         223  \n","4                            ACDelco EP386 Fuel Pump  B000C9PA54         312  "],"text/html":["\n","  <div id=\"df-57e945ce-3456-4035-ad34-9e3919570323\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>content</th>\n","      <th>title</th>\n","      <th>uid</th>\n","      <th>target_ind</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Premium quality five pocket jean from Wrangler...</td>\n","      <td>Amazon.com: Wrangler Men's Rugged Wear Relaxed...</td>\n","      <td>B0000CBALT</td>\n","      <td>247</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>If you're looking for a different kind of anim...</td>\n","      <td>Sakura Diaries - Complete Series Collector's E...</td>\n","      <td>B00005QFDT</td>\n","      <td>453</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>First things first: Yes, Thinking XXX features...</td>\n","      <td>Thinking XXX (Extended Cut) (2006)</td>\n","      <td>B000BNXD50</td>\n","      <td>228</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Feathertouch. 100% Polyester Machine Wash Warm...</td>\n","      <td>Amazon.com: Petite Feathertouch Pull-On Pant: ...</td>\n","      <td>B0002LK9V2</td>\n","      <td>223</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>When you need outstanding fuel delivery, easy ...</td>\n","      <td>ACDelco EP386 Fuel Pump</td>\n","      <td>B000C9PA54</td>\n","      <td>312</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-57e945ce-3456-4035-ad34-9e3919570323')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-57e945ce-3456-4035-ad34-9e3919570323 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-57e945ce-3456-4035-ad34-9e3919570323');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["data['target_ind'].hist()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":286},"id":"LfKlgLRZjqAH","executionInfo":{"status":"ok","timestamp":1677953280490,"user_tz":-330,"elapsed":464,"user":{"displayName":"Gadekar Jaideep Bharat ch19b009","userId":"14109346550278320247"}},"outputId":"2586dc29-14ba-4a10-f205-ff20318a7fdf"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<AxesSubplot:>"]},"metadata":{},"execution_count":5},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["data['title_len'] = data['title'].apply(lambda x: len(x))"],"metadata":{"id":"jyGAvT9Eju3B"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data['title_len'].hist(bins = 50)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"EK37KhQClRfb","executionInfo":{"status":"ok","timestamp":1677953333957,"user_tz":-330,"elapsed":794,"user":{"displayName":"Gadekar Jaideep Bharat ch19b009","userId":"14109346550278320247"}},"outputId":"ebcea8ff-6405-4f47-938c-722a925208f5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<AxesSubplot:>"]},"metadata":{},"execution_count":7},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["data['content_len'] = data['content'].apply(lambda x: len(x))\n","data['content_len'].hist(bins = 50)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"Ee8cpihclSmc","executionInfo":{"status":"ok","timestamp":1677953334601,"user_tz":-330,"elapsed":652,"user":{"displayName":"Gadekar Jaideep Bharat ch19b009","userId":"14109346550278320247"}},"outputId":"afcc56eb-1e2a-4e9d-e1bf-eb610a89d884"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<AxesSubplot:>"]},"metadata":{},"execution_count":8},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["data = data[data['content_len'] < 6000]\n","data['content_len'].hist(bins = 50)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"Rn17TzzWluaE","executionInfo":{"status":"ok","timestamp":1677953337356,"user_tz":-330,"elapsed":674,"user":{"displayName":"Gadekar Jaideep Bharat ch19b009","userId":"14109346550278320247"}},"outputId":"c1141a34-a412-4975-9543-310bb1c93057"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<AxesSubplot:>"]},"metadata":{},"execution_count":9},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["data = data[data['title_len'] < 200]\n","data['title_len'].hist()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"w8rqFhKzocJg","executionInfo":{"status":"ok","timestamp":1677953338709,"user_tz":-330,"elapsed":753,"user":{"displayName":"Gadekar Jaideep Bharat ch19b009","userId":"14109346550278320247"}},"outputId":"f0b3aa43-fe17-4eee-f6ef-e6afd0b2408e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<AxesSubplot:>"]},"metadata":{},"execution_count":10},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["data['target_ind'] = data['target_ind'].astype(np.int64)\n","data[['content', 'title']] = data[['content', 'title']].astype('str')\n","# data['content'] = data['content'].astype('str')"],"metadata":{"id":"5nAXvjUYuUQW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FOFgdkH9utYq","executionInfo":{"status":"ok","timestamp":1677953340146,"user_tz":-330,"elapsed":4,"user":{"displayName":"Gadekar Jaideep Bharat ch19b009","userId":"14109346550278320247"}},"outputId":"2c984ec5-8b91-4e2c-b877-86086fbe4e8c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 34714 entries, 0 to 35111\n","Data columns (total 6 columns):\n"," #   Column       Non-Null Count  Dtype \n","---  ------       --------------  ----- \n"," 0   content      34714 non-null  object\n"," 1   title        34714 non-null  object\n"," 2   uid          34714 non-null  object\n"," 3   target_ind   34714 non-null  int64 \n"," 4   title_len    34714 non-null  int64 \n"," 5   content_len  34714 non-null  int64 \n","dtypes: int64(3), object(3)\n","memory usage: 1.9+ MB\n"]}]},{"cell_type":"code","source":["!pip install transformers"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-JtYQXalsd9T","executionInfo":{"status":"ok","timestamp":1677993875768,"user_tz":-330,"elapsed":9813,"user":{"displayName":"Gadekar Jaideep Bharat ch19b009","userId":"14109346550278320247"}},"outputId":"9fd2e5f1-6109-4bb7-9191-1d95867de724"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting transformers\n","  Downloading transformers-4.26.1-py3-none-any.whl (6.3 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.3/6.3 MB\u001b[0m \u001b[31m55.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.8/dist-packages (from transformers) (4.64.1)\n","Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.8/dist-packages (from transformers) (6.0)\n","Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.8/dist-packages (from transformers) (2022.6.2)\n","Requirement already satisfied: requests in /usr/local/lib/python3.8/dist-packages (from transformers) (2.25.1)\n","Collecting huggingface-hub<1.0,>=0.11.0\n","  Downloading huggingface_hub-0.12.1-py3-none-any.whl (190 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m190.3/190.3 KB\u001b[0m \u001b[31m24.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.8/dist-packages (from transformers) (1.22.4)\n","Collecting tokenizers!=0.11.3,<0.14,>=0.11.1\n","  Downloading tokenizers-0.13.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (7.6 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m7.6/7.6 MB\u001b[0m \u001b[31m61.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.8/dist-packages (from transformers) (23.0)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.8/dist-packages (from transformers) (3.9.0)\n","Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.8/dist-packages (from huggingface-hub<1.0,>=0.11.0->transformers) (4.5.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.8/dist-packages (from requests->transformers) (2022.12.7)\n","Requirement already satisfied: chardet<5,>=3.0.2 in /usr/local/lib/python3.8/dist-packages (from requests->transformers) (4.0.0)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.8/dist-packages (from requests->transformers) (2.10)\n","Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.8/dist-packages (from requests->transformers) (1.26.14)\n","Installing collected packages: tokenizers, huggingface-hub, transformers\n","Successfully installed huggingface-hub-0.12.1 tokenizers-0.13.2 transformers-4.26.1\n"]}]},{"cell_type":"code","source":["# Importing the libraries needed\n","import pandas as pd\n","import torch\n","import transformers\n","from torch.utils.data import Dataset, DataLoader\n","from transformers import DistilBertModel, DistilBertTokenizer"],"metadata":{"id":"SrD74chRpi4o"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# # Setting up the device for GPU usage\n","from torch import cuda\n","device = 'cuda' if cuda.is_available() else 'cpu'"],"metadata":{"id":"mT0TtTs4scDX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Defining some key variables that will be used later on in the training\n","MAX_LEN = 512\n","TRAIN_BATCH_SIZE = 4\n","VALID_BATCH_SIZE = 2\n","EPOCHS = 1\n","LEARNING_RATE = 1e-05\n","tokenizer = DistilBertTokenizer.from_pretrained('distilbert-base-cased')"],"metadata":{"id":"bj723Mzyssbp","executionInfo":{"status":"ok","timestamp":1677995446463,"user_tz":-330,"elapsed":395,"user":{"displayName":"Gadekar Jaideep Bharat ch19b009","userId":"14109346550278320247"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["data['title_content'] = data['title'] + \" \" + data['content']"],"metadata":{"id":"JAQn3LkGv4V9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data['len'] = data['title_content'].apply(lambda x: len(x))\n","print(data['len'].mean())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"raINiBY_wPqs","executionInfo":{"status":"ok","timestamp":1677953400018,"user_tz":-330,"elapsed":670,"user":{"displayName":"Gadekar Jaideep Bharat ch19b009","userId":"14109346550278320247"}},"outputId":"2beec9e4-8dec-43f7-df17-25adf2799dd5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["869.8282249236619\n"]}]},{"cell_type":"code","source":["class Triage(Dataset):\n","    def __init__(self, dataframe, tokenizer, max_len):\n","        self.len = len(dataframe)\n","        self.data = dataframe\n","        self.tokenizer = tokenizer\n","        self.max_len = max_len\n","        \n","    def __getitem__(self, index):\n","        title = str(self.data.title_content[index])\n","        title = \" \".join(title.split())\n","        inputs = self.tokenizer.encode_plus(\n","            title,\n","            None,\n","            add_special_tokens=True,\n","            max_length=self.max_len,\n","            pad_to_max_length=True,\n","            return_token_type_ids=True,\n","            truncation=True\n","        )\n","        ids = inputs['input_ids']\n","        mask = inputs['attention_mask']\n","\n","        return {\n","            'ids': torch.tensor(ids, dtype=torch.long),\n","            'mask': torch.tensor(mask, dtype=torch.long),\n","            'targets': torch.tensor(self.data.target_ind[index], dtype=torch.long)\n","        } \n","    \n","    def __len__(self):\n","        return self.len\n"],"metadata":{"id":"M3602sAAs7bG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data = data[['title_content', 'target_ind']]"],"metadata":{"id":"5GVHWTs3xAaK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Creating the dataset and dataloader for the neural network\n","\n","train_size = 0.8\n","train_dataset=data.sample(frac=train_size,random_state=200)\n","test_dataset=data.drop(train_dataset.index).reset_index(drop=True)\n","train_dataset = train_dataset.reset_index(drop=True)\n","\n","\n","print(\"FULL Dataset: {}\".format(data.shape))\n","print(\"TRAIN Dataset: {}\".format(train_dataset.shape))\n","print(\"TEST Dataset: {}\".format(test_dataset.shape))\n","\n","training_set = Triage(train_dataset, tokenizer, MAX_LEN)\n","testing_set = Triage(test_dataset, tokenizer, MAX_LEN)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MQwvkz2kwkhQ","executionInfo":{"status":"ok","timestamp":1677953402465,"user_tz":-330,"elapsed":3,"user":{"displayName":"Gadekar Jaideep Bharat ch19b009","userId":"14109346550278320247"}},"outputId":"8742fef5-67dd-4de9-e9e4-f1746b9009bf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["FULL Dataset: (34714, 2)\n","TRAIN Dataset: (27771, 2)\n","TEST Dataset: (6943, 2)\n"]}]},{"cell_type":"code","source":["\n","train_params = {'batch_size': TRAIN_BATCH_SIZE,\n","                'shuffle': True,\n","                'num_workers': 0\n","                }\n","\n","test_params = {'batch_size': VALID_BATCH_SIZE,\n","                'shuffle': True,\n","                'num_workers': 0\n","                }\n","\n","training_loader = DataLoader(training_set, **train_params)\n","testing_loader = DataLoader(testing_set, **test_params)"],"metadata":{"id":"hgc--jEBw5hv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class DistillBERTClass(torch.nn.Module):\n","    def __init__(self):\n","        super(DistillBERTClass, self).__init__()\n","        self.l1 = DistilBertModel.from_pretrained(\"distilbert-base-uncased\")\n","        self.pre_classifier = torch.nn.Linear(768, 768)\n","        self.dropout = torch.nn.Dropout(0.3)\n","        self.classifier = torch.nn.Linear(768, 500)\n","\n","    def forward(self, input_ids, attention_mask):\n","        output_1 = self.l1(input_ids=input_ids, attention_mask=attention_mask)\n","        hidden_state = output_1[0]\n","        pooler = hidden_state[:, 0]\n","        pooler = self.pre_classifier(pooler)\n","        pooler = torch.nn.ReLU()(pooler)\n","        pooler = self.dropout(pooler)\n","        output = self.classifier(pooler)\n","        return output"],"metadata":{"id":"cRRTLfmtxNeL","executionInfo":{"status":"ok","timestamp":1677995161114,"user_tz":-330,"elapsed":573,"user":{"displayName":"Gadekar Jaideep Bharat ch19b009","userId":"14109346550278320247"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["\n","model = DistillBERTClass()\n","model.to(device)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"referenced_widgets":["3011fa28b8784cd3b1c3892842f8a925","bb412c7d9daf45b3ab7d80e4ed92545f","833b444bf0664f32809ca248eb779eb2","b16443d1a60d4a6cb46fd103c69352d1","3f5f9eeceb0848fbb8b5a136d7782eb2","4ca0bf0ffb43454dbcec5f94e7567417","17625d7d2f5447b389fca375e4b08fa9","e1cc009c4cd34365a30240f151d91461","863442480bef43af864a71f92c5f3a88","38d1b787a57b4f849122f7526e48b0e8","0b5dedd4c8244c06857480f1f018666d","126c6557c97c45a68535302e4c0367e8","afbd9f8843794eaf8fc6cbf201451275","435134fe7e0c4ba090e09952409bc472","7f4072f2ee0347bf9f1aca3e4587eee4","a8fab88d57bc49378a366b1e4f3f29a8","0ffaab042fb047c494610268f989c75f","8e5e36db2cd14ccc9182b004d74cfb69","880c41577587403484461214bd284923","96a3ce2df11f473197651cbe5537b659","c0cc033804a944c58145f1386cca32cb","52dbd03613c444a0874103b9a02e3f1b"]},"id":"jcdqn_qzxRX2","executionInfo":{"status":"ok","timestamp":1677953417782,"user_tz":-330,"elapsed":11401,"user":{"displayName":"Gadekar Jaideep Bharat ch19b009","userId":"14109346550278320247"}},"outputId":"862ab8a4-4c19-4519-f34a-75cabfc12ee9"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["Downloading (…)lve/main/config.json:   0%|          | 0.00/483 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"3011fa28b8784cd3b1c3892842f8a925"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["Downloading (…)\"pytorch_model.bin\";:   0%|          | 0.00/268M [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"126c6557c97c45a68535302e4c0367e8"}},"metadata":{}},{"output_type":"stream","name":"stderr","text":["Some weights of the model checkpoint at distilbert-base-uncased were not used when initializing DistilBertModel: ['vocab_layer_norm.bias', 'vocab_projector.bias', 'vocab_projector.weight', 'vocab_transform.bias', 'vocab_layer_norm.weight', 'vocab_transform.weight']\n","- This IS expected if you are initializing DistilBertModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n","- This IS NOT expected if you are initializing DistilBertModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\n"]},{"output_type":"execute_result","data":{"text/plain":["DistillBERTClass(\n","  (l1): DistilBertModel(\n","    (embeddings): Embeddings(\n","      (word_embeddings): Embedding(30522, 768, padding_idx=0)\n","      (position_embeddings): Embedding(512, 768)\n","      (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n","      (dropout): Dropout(p=0.1, inplace=False)\n","    )\n","    (transformer): Transformer(\n","      (layer): ModuleList(\n","        (0): TransformerBlock(\n","          (attention): MultiHeadSelfAttention(\n","            (dropout): Dropout(p=0.1, inplace=False)\n","            (q_lin): Linear(in_features=768, out_features=768, bias=True)\n","            (k_lin): Linear(in_features=768, out_features=768, bias=True)\n","            (v_lin): Linear(in_features=768, out_features=768, bias=True)\n","            (out_lin): Linear(in_features=768, out_features=768, bias=True)\n","          )\n","          (sa_layer_norm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n","          (ffn): FFN(\n","            (dropout): Dropout(p=0.1, inplace=False)\n","            (lin1): Linear(in_features=768, out_features=3072, bias=True)\n","            (lin2): Linear(in_features=3072, out_features=768, bias=True)\n","            (activation): GELUActivation()\n","          )\n","          (output_layer_norm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n","        )\n","        (1): TransformerBlock(\n","          (attention): MultiHeadSelfAttention(\n","            (dropout): Dropout(p=0.1, inplace=False)\n","            (q_lin): Linear(in_features=768, out_features=768, bias=True)\n","            (k_lin): Linear(in_features=768, out_features=768, bias=True)\n","            (v_lin): Linear(in_features=768, out_features=768, bias=True)\n","            (out_lin): Linear(in_features=768, out_features=768, bias=True)\n","          )\n","          (sa_layer_norm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n","          (ffn): FFN(\n","            (dropout): Dropout(p=0.1, inplace=False)\n","            (lin1): Linear(in_features=768, out_features=3072, bias=True)\n","            (lin2): Linear(in_features=3072, out_features=768, bias=True)\n","            (activation): GELUActivation()\n","          )\n","          (output_layer_norm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n","        )\n","        (2): TransformerBlock(\n","          (attention): MultiHeadSelfAttention(\n","            (dropout): Dropout(p=0.1, inplace=False)\n","            (q_lin): Linear(in_features=768, out_features=768, bias=True)\n","            (k_lin): Linear(in_features=768, out_features=768, bias=True)\n","            (v_lin): Linear(in_features=768, out_features=768, bias=True)\n","            (out_lin): Linear(in_features=768, out_features=768, bias=True)\n","          )\n","          (sa_layer_norm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n","          (ffn): FFN(\n","            (dropout): Dropout(p=0.1, inplace=False)\n","            (lin1): Linear(in_features=768, out_features=3072, bias=True)\n","            (lin2): Linear(in_features=3072, out_features=768, bias=True)\n","            (activation): GELUActivation()\n","          )\n","          (output_layer_norm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n","        )\n","        (3): TransformerBlock(\n","          (attention): MultiHeadSelfAttention(\n","            (dropout): Dropout(p=0.1, inplace=False)\n","            (q_lin): Linear(in_features=768, out_features=768, bias=True)\n","            (k_lin): Linear(in_features=768, out_features=768, bias=True)\n","            (v_lin): Linear(in_features=768, out_features=768, bias=True)\n","            (out_lin): Linear(in_features=768, out_features=768, bias=True)\n","          )\n","          (sa_layer_norm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n","          (ffn): FFN(\n","            (dropout): Dropout(p=0.1, inplace=False)\n","            (lin1): Linear(in_features=768, out_features=3072, bias=True)\n","            (lin2): Linear(in_features=3072, out_features=768, bias=True)\n","            (activation): GELUActivation()\n","          )\n","          (output_layer_norm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n","        )\n","        (4): TransformerBlock(\n","          (attention): MultiHeadSelfAttention(\n","            (dropout): Dropout(p=0.1, inplace=False)\n","            (q_lin): Linear(in_features=768, out_features=768, bias=True)\n","            (k_lin): Linear(in_features=768, out_features=768, bias=True)\n","            (v_lin): Linear(in_features=768, out_features=768, bias=True)\n","            (out_lin): Linear(in_features=768, out_features=768, bias=True)\n","          )\n","          (sa_layer_norm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n","          (ffn): FFN(\n","            (dropout): Dropout(p=0.1, inplace=False)\n","            (lin1): Linear(in_features=768, out_features=3072, bias=True)\n","            (lin2): Linear(in_features=3072, out_features=768, bias=True)\n","            (activation): GELUActivation()\n","          )\n","          (output_layer_norm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n","        )\n","        (5): TransformerBlock(\n","          (attention): MultiHeadSelfAttention(\n","            (dropout): Dropout(p=0.1, inplace=False)\n","            (q_lin): Linear(in_features=768, out_features=768, bias=True)\n","            (k_lin): Linear(in_features=768, out_features=768, bias=True)\n","            (v_lin): Linear(in_features=768, out_features=768, bias=True)\n","            (out_lin): Linear(in_features=768, out_features=768, bias=True)\n","          )\n","          (sa_layer_norm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n","          (ffn): FFN(\n","            (dropout): Dropout(p=0.1, inplace=False)\n","            (lin1): Linear(in_features=768, out_features=3072, bias=True)\n","            (lin2): Linear(in_features=3072, out_features=768, bias=True)\n","            (activation): GELUActivation()\n","          )\n","          (output_layer_norm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n","        )\n","      )\n","    )\n","  )\n","  (pre_classifier): Linear(in_features=768, out_features=768, bias=True)\n","  (dropout): Dropout(p=0.3, inplace=False)\n","  (classifier): Linear(in_features=768, out_features=500, bias=True)\n",")"]},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["\n","# Creating the loss function and optimizer\n","loss_function = torch.nn.CrossEntropyLoss()\n","optimizer = torch.optim.Adam(params =  model.parameters(), lr=LEARNING_RATE)"],"metadata":{"id":"sKvKak4BxTdA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","# Function to calcuate the accuracy of the model\n","\n","def calcuate_accu(big_idx, targets):\n","    n_correct = (big_idx==targets).sum().item()\n","    return n_correct"],"metadata":{"id":"E4Qap989xWMu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","def train(epoch):\n","    tr_loss = 0\n","    n_correct = 0\n","    nb_tr_steps = 0\n","    nb_tr_examples = 0\n","    model.train()\n","    for _,data in enumerate(training_loader, 0):\n","        ids = data['ids'].to(device, dtype = torch.long)\n","        mask = data['mask'].to(device, dtype = torch.long)\n","        targets = data['targets'].to(device, dtype = torch.long)\n","\n","        outputs = model(ids, mask)\n","        loss = loss_function(outputs, targets)\n","        tr_loss += loss.item()\n","        big_val, big_idx = torch.max(outputs.data, dim=1)\n","        n_correct += calcuate_accu(big_idx, targets)\n","\n","        nb_tr_steps += 1\n","        nb_tr_examples+=targets.size(0)\n","        \n","        if _%5000==0:\n","            loss_step = tr_loss/nb_tr_steps\n","            accu_step = (n_correct*100)/nb_tr_examples \n","            print(f\"Training Loss per 5000 steps: {loss_step}\")\n","            print(f\"Training Accuracy per 5000 steps: {accu_step}\")\n","\n","        optimizer.zero_grad()\n","        loss.backward()\n","        # # When using GPU\n","        optimizer.step()\n","\n","    print(f'The Total Accuracy for Epoch {epoch}: {(n_correct*100)/nb_tr_examples}')\n","    epoch_loss = tr_loss/nb_tr_steps\n","    epoch_accu = (n_correct*100)/nb_tr_examples\n","    print(f\"Training Loss Epoch: {epoch_loss}\")\n","    print(f\"Training Accuracy Epoch: {epoch_accu}\")\n","\n","    return \n"],"metadata":{"id":"jtMpEZPIxY1K"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for epoch in range(EPOCHS):\n","    train(epoch)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UiQrL310xyLE","executionInfo":{"status":"ok","timestamp":1677960068549,"user_tz":-330,"elapsed":1477235,"user":{"displayName":"Gadekar Jaideep Bharat ch19b009","userId":"14109346550278320247"}},"outputId":"ba7b31bb-dd09-4a80-9b7e-2917797c0270"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Training Loss per 5000 steps: 3.470675468444824\n","Training Accuracy per 5000 steps: 0.0\n","Training Loss per 5000 steps: 2.3026967635871745\n","Training Accuracy per 5000 steps: 36.342731453709256\n","The Total Accuracy for Epoch 0: 36.563321450433904\n","Training Loss Epoch: 2.262143943581666\n","Training Accuracy Epoch: 36.563321450433904\n"]}]},{"cell_type":"code","source":[" \n","def valid(model, testing_loader):\n","    model.eval()\n","    n_correct = 0; n_wrong = 0; total = 0\n","    with torch.no_grad():\n","        for _, data in enumerate(testing_loader, 0):\n","            ids = data['ids'].to(device, dtype = torch.long)\n","            mask = data['mask'].to(device, dtype = torch.long)\n","            targets = data['targets'].to(device, dtype = torch.long)\n","            outputs = model(ids, mask).squeeze()\n","            loss = loss_function(outputs, targets)\n","            tr_loss += loss.item()\n","            big_val, big_idx = torch.max(outputs.data, dim=1)\n","            n_correct += calcuate_accu(big_idx, targets)\n","\n","            nb_tr_steps += 1\n","            nb_tr_examples+=targets.size(0)\n","            \n","            if _%5000==0:\n","                loss_step = tr_loss/nb_tr_steps\n","                accu_step = (n_correct*100)/nb_tr_examples\n","                print(f\"Validation Loss per 100 steps: {loss_step}\")\n","                print(f\"Validation Accuracy per 100 steps: {accu_step}\")\n","    epoch_loss = tr_loss/nb_tr_steps\n","    epoch_accu = (n_correct*100)/nb_tr_examples\n","    print(f\"Validation Loss Epoch: {epoch_loss}\")\n","    print(f\"Validation Accuracy Epoch: {epoch_accu}\")\n","    \n","    return epoch_accu"],"metadata":{"id":"RPAkjWDHx2Us"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","print('This is the validation section to print the accuracy and see how it performs')\n","print('Here we are leveraging on the dataloader crearted for the validation dataset, the approcah is using more of pytorch')\n","\n","acc = valid(model, testing_loader)\n","print(\"Accuracy on test data = %0.2f%%\" % acc)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":373},"id":"K8Yq4dD17gEm","executionInfo":{"status":"error","timestamp":1677955317157,"user_tz":-330,"elapsed":1704,"user":{"displayName":"Gadekar Jaideep Bharat ch19b009","userId":"14109346550278320247"}},"outputId":"773d5d3d-7afc-4e60-e757-c55c97030bb3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["This is the validation section to print the accuracy and see how it performs\n","Here we are leveraging on the dataloader crearted for the validation dataset, the approcah is using more of pytorch\n"]},{"output_type":"error","ename":"UnboundLocalError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mUnboundLocalError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-30-aa61109a5b1c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Here we are leveraging on the dataloader crearted for the validation dataset, the approcah is using more of pytorch'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0macc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvalid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtesting_loader\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Accuracy on test data = %0.2f%%\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0macc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-29-9573ba49e529>\u001b[0m in \u001b[0;36mvalid\u001b[0;34m(model, testing_loader)\u001b[0m\n\u001b[1;32m      9\u001b[0m             \u001b[0moutputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mids\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmask\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msqueeze\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m             \u001b[0mloss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mloss_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtargets\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m             \u001b[0mtr_loss\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0mloss\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m             \u001b[0mbig_val\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbig_idx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutputs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdim\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m             \u001b[0mn_correct\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0mcalcuate_accu\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbig_idx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtargets\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mUnboundLocalError\u001b[0m: local variable 'tr_loss' referenced before assignment"]}]},{"cell_type":"code","source":["\n","output_model_file = './gdrive/MyDrive/Techsoc Hackathon/pytorch_distilbert_news.bin'\n","output_vocab_file = './gdrive/MyDrive/Techsoc Hackathon/vocab_distilbert_news.bin'\n","\n","model_to_save = model\n","torch.save(model_to_save, output_model_file)\n","tokenizer.save_vocabulary(output_vocab_file)\n","\n","print('All files saved')\n","print('This tutorial is completed')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"u9jxZMN57jIZ","executionInfo":{"status":"ok","timestamp":1677960230475,"user_tz":-330,"elapsed":1471,"user":{"displayName":"Gadekar Jaideep Bharat ch19b009","userId":"14109346550278320247"}},"outputId":"4a75726b-a461-4433-e77f-ebc700d13bd6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["All files saved\n","This tutorial is completed\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"KA3IgKE4B7zp"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# On Test Set"],"metadata":{"id":"UOIRnkwFOcIc"}},{"cell_type":"code","source":["test_data = pd.read_csv('/content/gdrive/MyDrive/Techsoc Hackathon/PS3_test.csv')"],"metadata":{"id":"Yn1agNBhOgia"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_data['title_content'] = test_data['title'] + test_data['content']\n","test_data = test_data[['uid','title_content']]"],"metadata":{"id":"bR9n7ytWPNJF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["testing_set = Triage(test_data, tokenizer, MAX_LEN)\n","testing_loader = DataLoader(testing_set)"],"metadata":{"id":"ze1ufl9XPlu5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from transformers import BertConfig, BertModel\n","tokenier = tokenizer. ('/content/gdrive/MyDrive/Techsoc Hackathon/models/tokenizer')\n","model_loaded = DistillBERTClass()\n","model_loaded = torch.load('/content/gdrive/MyDrive/Techsoc Hackathon/models/pytorch_distilbert_news.bin')\n","# model_loaded = ('/content/gdrive/MyDrive/Techsoc Hackathon/models/pytorch_distilbert_news.bin')\n","# model_loaded "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QTuzBgEZQNp0","executionInfo":{"status":"ok","timestamp":1677995324502,"user_tz":-330,"elapsed":7782,"user":{"displayName":"Gadekar Jaideep Bharat ch19b009","userId":"14109346550278320247"}},"outputId":"220d49cd-9b89-4e7e-c64b-2198f41cd1f9"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stderr","text":["Some weights of the model checkpoint at distilbert-base-uncased were not used when initializing DistilBertModel: ['vocab_transform.weight', 'vocab_transform.bias', 'vocab_layer_norm.bias', 'vocab_projector.bias', 'vocab_layer_norm.weight', 'vocab_projector.weight']\n","- This IS expected if you are initializing DistilBertModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n","- This IS NOT expected if you are initializing DistilBertModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\n"]}]},{"cell_type":"code","source":["tokens = tokenizer.encode(test_data['title_content'])"],"metadata":{"id":"tMNH-frvRo33","colab":{"base_uri":"https://localhost:8080/","height":501},"executionInfo":{"status":"error","timestamp":1677995736006,"user_tz":-330,"elapsed":699,"user":{"displayName":"Gadekar Jaideep Bharat ch19b009","userId":"14109346550278320247"}},"outputId":"91b4a0dc-cfe1-4aba-9cc3-79cd458c9a14"},"execution_count":28,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-28-60e74e57513f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtokens\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtokenizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'title_content'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/transformers/tokenization_utils_base.py\u001b[0m in \u001b[0;36mencode\u001b[0;34m(self, text, text_pair, add_special_tokens, padding, truncation, max_length, stride, return_tensors, **kwargs)\u001b[0m\n\u001b[1;32m   2292\u001b[0m                 method).\n\u001b[1;32m   2293\u001b[0m         \"\"\"\n\u001b[0;32m-> 2294\u001b[0;31m         encoded_inputs = self.encode_plus(\n\u001b[0m\u001b[1;32m   2295\u001b[0m             \u001b[0mtext\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2296\u001b[0m             \u001b[0mtext_pair\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtext_pair\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/transformers/tokenization_utils_base.py\u001b[0m in \u001b[0;36mencode_plus\u001b[0;34m(self, text, text_pair, add_special_tokens, padding, truncation, max_length, stride, is_split_into_words, pad_to_multiple_of, return_tensors, return_token_type_ids, return_attention_mask, return_overflowing_tokens, return_special_tokens_mask, return_offsets_mapping, return_length, verbose, **kwargs)\u001b[0m\n\u001b[1;32m   2700\u001b[0m         )\n\u001b[1;32m   2701\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2702\u001b[0;31m         return self._encode_plus(\n\u001b[0m\u001b[1;32m   2703\u001b[0m             \u001b[0mtext\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2704\u001b[0m             \u001b[0mtext_pair\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtext_pair\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/transformers/tokenization_utils.py\u001b[0m in \u001b[0;36m_encode_plus\u001b[0;34m(self, text, text_pair, add_special_tokens, padding_strategy, truncation_strategy, max_length, stride, is_split_into_words, pad_to_multiple_of, return_tensors, return_token_type_ids, return_attention_mask, return_overflowing_tokens, return_special_tokens_mask, return_offsets_mapping, return_length, verbose, **kwargs)\u001b[0m\n\u001b[1;32m    647\u001b[0m             )\n\u001b[1;32m    648\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 649\u001b[0;31m         \u001b[0mfirst_ids\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_input_ids\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    650\u001b[0m         \u001b[0msecond_ids\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_input_ids\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtext_pair\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mtext_pair\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    651\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/transformers/tokenization_utils.py\u001b[0m in \u001b[0;36mget_input_ids\u001b[0;34m(text)\u001b[0m\n\u001b[1;32m    633\u001b[0m                     )\n\u001b[1;32m    634\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 635\u001b[0;31m                     raise ValueError(\n\u001b[0m\u001b[1;32m    636\u001b[0m                         \u001b[0;34mf\"Input {text} is not valid. Should be a string, a list/tuple of strings or a list/tuple of\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    637\u001b[0m                         \u001b[0;34m\" integers.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Input 0       Alloy Steel Socket Cap Screw, Flat Head, Hex S...\n1       -161 Buna O-Ring, 70A Durometer, Black, 5-1/2&...\n2       -445 Viton O-Ring, 75A Durometer, Black, 8&#03...\n3       Amazon.com: Port Authority Silk Touch Sport Sh...\n4       -359 Buna O-Ring, 70A Durometer, Black, 5-3/4&...\n                              ...                        \n8101    Terror in the Haunted HouseGerald Mohr, Cathy ...\n8102    Super Mario KartThe first Go-Kart Racing game ...\n8103    Smokey Robinson - Standing Room Only (1990)For...\n8104    Reflections on Commercial Life: An Anthology o...\n8105    Ikki Tousen Complete SetOnce again blood flows...\nName: title_content, Length: 8106, dtype: object is not valid. Should be a string, a list/tuple of strings or a list/tuple of integers."]}]},{"cell_type":"code","source":[],"metadata":{"id":"3fvsyybGVmdC"},"execution_count":null,"outputs":[]}]}